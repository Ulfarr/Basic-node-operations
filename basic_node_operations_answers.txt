Questions

1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

A: Sort: Uses a sorting algorithm to sort and print the lines of its input or concatenation of all files.

        done(userInput);
      break;
      commandLibrary.echo(userInputArray.slice(1).join(" "));
     process.stdout.write('\nprompt > ');
     process.stdout.write(output);
    "echo": function(userInput) {
    case "echo":
    }
   const command = userInputArray[0];
   const userInputArray = userInput.split(" ");
   switch (command) {
  }
 const commandLibrary = {
 function done(output) {
 function evaluateCmd(userInput) {
 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;
 }
 }
 };
const fs = require("fs");
   
   wc: reads either the input or the list of files and generates newline count, word count, and byte count along with the file name.

 30  50 612 commands.js

   uniq: filters out repeated adjacent lines in a file and then generates the files contents.

const fs = require("fs");

 function done(output) {
     process.stdout.write(output);
     process.stdout.write('\nprompt > ');
 }

 function evaluateCmd(userInput) {

   const userInputArray = userInput.split(" ");
   const command = userInputArray[0];

   switch (command) {
    case "echo":

      commandLibrary.echo(userInputArray.slice(1).join(" "));
      break;
  }
 }

 const commandLibrary = {
    "echo": function(userInput) {
        done(userInput);
    }
 };

 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;

2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

A: sort commands.js | uniq | wc 
     24      49     597

This command sorts command.js, then removes duplicate adjacent lines, and returns a line count, word count, and byte count.

Programming Questions

3. Implement the head command in the commands.js file. The head command outputs the first n lines of a file (you may decide what n is). This function will be similar to cat in structure so it will be helpful to reference.

4. Implement the tail command in the commands.js file. The tail command is the inverse of the head command. It outputs the last n lines of a file (you may decide what n is).

5. It is possible that a user will input a non-existent command to our bash shell. Within commands.js create an errorHandler function which will output an error message if the command cannot be found.

6. Given a string, reverse the order of characters in each word within a sentence while maintaining the original word order and whitespace and return the string.

A: function reverseString(string) {
  var reversedWords = [];
  var reversedString = '';
  var splitArray = string.split(' ');
  splitArray.forEach(word => {
    reversedWords.push(reverseWords(word));
  });
  reversedString = reversedWords.join(' ');
  return reversedString;
}

function reverseWords(word) {
  var letters = [];
  var reverseWord = '';
  for (let i = 0; i < word.length; i++) {
    letters.push(word[i]);
  }
  for (let i = 0; i < word.length; i++) {
    reverseWord += letters.pop();
  }
  return reverseWord;
}